/*
 * awsecommerceservice_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for PositiveIntegerOrAllEnum enum
 */
type PositiveIntegerOrAllEnum int

/**
 * Value collection for PositiveIntegerOrAllEnum enum
 */
const (
    PositiveIntegerOrAll_ALL PositiveIntegerOrAllEnum = 1 + iota
)

func (r PositiveIntegerOrAllEnum) MarshalJSON() ([]byte, error) { 
    s := PositiveIntegerOrAllEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *PositiveIntegerOrAllEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  PositiveIntegerOrAllEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts PositiveIntegerOrAllEnum to its string representation
 */
func PositiveIntegerOrAllEnumToValue(positiveIntegerOrAllEnum PositiveIntegerOrAllEnum) string {
    switch positiveIntegerOrAllEnum {
        case PositiveIntegerOrAll_ALL:
    		return "All"		
        default:
        	return "All"
    }
}

/**
 * Converts PositiveIntegerOrAllEnum Array to its string Array representation
*/
func PositiveIntegerOrAllEnumArrayToValue(positiveIntegerOrAllEnum []PositiveIntegerOrAllEnum) []string {
    convArray := make([]string,len( positiveIntegerOrAllEnum))
    for i:=0; i<len(positiveIntegerOrAllEnum);i++ {
        convArray[i] = PositiveIntegerOrAllEnumToValue(positiveIntegerOrAllEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func PositiveIntegerOrAllEnumFromValue(value string) PositiveIntegerOrAllEnum {
    switch value {
        case "All":
            return PositiveIntegerOrAll_ALL
        default:
            return PositiveIntegerOrAll_ALL
    }
}

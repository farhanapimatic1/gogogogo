/*
 * awsecommerceservice_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
package awsecommerceservicebinding_pkg


import(
	"encoding/json"
	"awsecommerceservice_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"awsecommerceservice_lib"
	"awsecommerceservice_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type AWSECOMMERCESERVICEBINDING_IMPL struct { }

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch9 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup10 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup11 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup12 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet13 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd14 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate15 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify16 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear17 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch18 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup19 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup20 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup21 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet22 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd23 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate24 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify25 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear26 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch27 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup28 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup29 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup30 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet31 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd32 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate33 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify34 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear35 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch36 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup37 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup38 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup39 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet40 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd41 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate42 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify43 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear44 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch45 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup46 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup47 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup48 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet49 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd50 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate51 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify52 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear53 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch54 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup55 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup56 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup57 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet58 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd59 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate60 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify61 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear62 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch63 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup64 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup65 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup66 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet67 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd68 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate69 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify70 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear71 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch72 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup73 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup74 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup75 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet76 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd77 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate78 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify79 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear80 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch81 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup82 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup83 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup84 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet85 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd86 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate87 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify88 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear89 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemSearchRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemSearchResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemSearch90 (
            body *models_pkg.ItemSearchRequestMsg) (*models_pkg.ItemSearchResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemSearch"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemSearchResponseMsg = &models_pkg.ItemSearchResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.ItemLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.ItemLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateItemLookup91 (
            body *models_pkg.ItemLookupRequestMsg) (*models_pkg.ItemLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/ItemLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.ItemLookupResponseMsg = &models_pkg.ItemLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.BrowseNodeLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.BrowseNodeLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateBrowseNodeLookup92 (
            body *models_pkg.BrowseNodeLookupRequestMsg) (*models_pkg.BrowseNodeLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/BrowseNodeLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BrowseNodeLookupResponseMsg = &models_pkg.BrowseNodeLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.SimilarityLookupRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.SimilarityLookupResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateSimilarityLookup93 (
            body *models_pkg.SimilarityLookupRequestMsg) (*models_pkg.SimilarityLookupResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/SimilarityLookup"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.SimilarityLookupResponseMsg = &models_pkg.SimilarityLookupResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartGetRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartGetResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartGet94 (
            body *models_pkg.CartGetRequestMsg) (*models_pkg.CartGetResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartGet"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartGetResponseMsg = &models_pkg.CartGetResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartAddRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartAddResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartAdd95 (
            body *models_pkg.CartAddRequestMsg) (*models_pkg.CartAddResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartAdd"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartAddResponseMsg = &models_pkg.CartAddResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartCreateRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartCreateResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartCreate96 (
            body *models_pkg.CartCreateRequestMsg) (*models_pkg.CartCreateResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartCreate"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartCreateResponseMsg = &models_pkg.CartCreateResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartModifyRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartModifyResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartModify97 (
            body *models_pkg.CartModifyRequestMsg) (*models_pkg.CartModifyResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartModify"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartModifyResponseMsg = &models_pkg.CartModifyResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    *models_pkg.CartClearRequestMsg        body     parameter: Required
 * @return	Returns the *models_pkg.CartClearResponseMsg response from the API call
 */
func (me *AWSECOMMERCESERVICEBINDING_IMPL) CreateCartClear98 (
            body *models_pkg.CartClearRequestMsg) (*models_pkg.CartClearResponseMsg, error) {
        //the base uri for api requests
    _queryBuilder := awsecommerceservice_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/CartClear"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.CartClearResponseMsg = &models_pkg.CartClearResponseMsg{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

